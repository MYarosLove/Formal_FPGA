Проектирование и внедрение вредоносного оборудования

Скрытые вредоносные схемы предоставляют злоумышленникам незаметный вектор атаки. Поскольку они занимают уровень ниже всего программного стека, вредоносные схемы могут обойти традиционные методы защиты. Однако в современных работах, посвященных троянским схемам, рассматриваются только простые атаки на само оборудование и простые средства защиты. Более сложные конструкции, атакующие программное обеспечение, остаются неизученными, равно как и контрмеры, которые может предпринять злоумышленник, чтобы обойти предложенные средства защиты.

Мы представляем разработку и реализацию вредоносных процессоров Иллинойса (IMP). Существует значительное пространство для проектирования вредоносных схем; мы показываем, что злоумышленник, вместо того чтобы разрабатывать одну конкретную атаку, может создавать аппаратное обеспечение для поддержки атак. Такие аппаратные средства позволяют проводить мощные атаки общего назначения, при этом количество дополнительного оборудования остается на удивление небольшим. Мы демонстрируем два таких аппаратных проекта и реализуем их в реальной системе. Кроме того, мы демонстрируем три мощные атаки с использованием этого оборудования, в том числе бэкдор для входа в систему, который дает злоумышленнику полный и высокоуровневый доступ к машине. Эта атака на вход в систему требует всего 1341 дополнительных ворот: ворота, которые могут быть использованы и для других атак. Вредоносные процессоры являются более практичными, более гибкими и более сложными для обнаружения, чем можно было бы предположить на основе первоначального анализа.


1 Введение
1.1 Мотивация

Злоумышленники могут скрытно внедрять схемы в интегральные микросхемы (ИМС), используемые в современных компьютерных системах; в недавнем отчете Министерства обороны [16] определены несколько современных тенденций, способствующих этой угрозе. Во-первых, закупка высокопроизводительных ИС не через коммерческих поставщиков стала экономически нецелесообразной. Во-вторых, эти коммерческие поставщики все чаще переносят этапы проектирования, производства и тестирования ИС в разные страны, что делает защиту цепочки поставок ИС невыполнимой задачей. В совокупности коммерческие закупки (COTS) и глобальное производство открывают "огромные и растущие" возможности для атак [16].

Устройства с вредоносными модификациями уже стали реальностью. В 2006 году Apple поставляла iPod, зараженные вирусом RavMonE [4]. Во время холодной войны ЦРУ саботировало программное обеспечение для управления нефтепроводами, которое затем было "украдено" русскими шпионами [10]. И наоборот, российские агенты перехватили и модифицировали пишущие машинки, которые должны были использоваться в посольстве США в Москве; модификации позволяли русским копировать любые документы, набранные на этих машинках [16]. Недавно внешние жесткие диски, продаваемые тайваньской компанией Seagate, поставлялись с установленным трояном, который отправлял личные данные удаленному злоумышленнику [1]. Хотя ни в одной из этих атак не используются вредоносные микросхемы, они наглядно демонстрируют возможность скрытого внедрения вредоносных элементов в цепочку поставок COTS.

Использование модифицированного оборудования дает злоумышленникам фундаментальное преимущество по сравнению с атаками, основанными на программном обеспечении. Благодаря более низкому уровню контроля злоумышленникам легче избежать обнаружения и предотвращения. Недавний проект SubVirt показывает, как использовать мониторы виртуальных машин для получения контроля над операционной системой (ОС) [11]. Такой низкий уровень контроля делает защиту от атаки гораздо более сложной, поскольку злоумышленник имеет контроль над всем вышележащим стеком программного обеспечения. Ниже аппаратного уровня нет никакого слоя, что дает такой атаке фундаментальное преимущество перед защитой.

Несмотря на то что в сообществе специалистов по безопасности была проделана некоторая начальная работа по этой проблеме, наше понимание вредоносных схем ограничено. Компания IBM разработала "троянскую схему" для кражи ключей шифрования [3]. Выборочное отключение частей схемы шифрования приводит к утечке ключа шифрования. Это лучший пример атаки, реализованной на аппаратном уровне, который нам известен, но у него есть несколько недостатков. Во-первых, атака напрямую оперирует абстракциями аппаратного уровня. Они сливают ключи шифрования из схемы шифрования и игнорируют абстракции более высокого уровня и аспекты системного уровня. Это ограничение является проблематичным, поскольку критически важная для безопасности информация редко напрямую отображается на абстракции аппаратного уровня. Во-вторых, несмотря на описание и оценку защитной стратегии, существующие контрстратегии, которые может использовать злоумышленник, не учитываются [17, 18]. Наконец, сама атака жестко закодирована; их вредоносная схема полезна только для этой конкретной цели.

Действительно, одна жестко закодированная атака в аппаратуре сильно преуменьшает возможности вредоносных схем. Этот стиль атаки - это атака, разработанная в аппаратуре; никто не разрабатывал аппаратуру для поддержки атак. Пространство проектирования вредоносных схем не изучено, за исключением простых, специализированных, жестко закодированных атак. Реагирование на угрозу троянских схем требует рассмотрения множества возможных вредоносных конструкций; кроме того, оно требует предвидения и учета контрходов злоумышленника против нашей защиты. Без такого учета мы остаемся открытыми для атак со стороны вредоносных схем.

1.2 Наш вклад

В этой статье мы решаем эти проблемы, разрабатывая и реализуя вредоносные процессоры Иллинойса (IMP). Мы показываем, что IMP способны на мощные атаки, используют удивительно мало схем и от них трудно защититься. Два наших основных вклада:
Мы рассматриваем пространство проектирования вредоносных схем. Помимо простого проектирования атак в аппаратной части, мы рассматриваем аппаратные механизмы для поддержки общих атак. Мы разработали две вредоносные модификации процессора: механизм доступа к памяти и механизм теневого режима. Механизм доступа к памяти позволяет злоумышленнику нарушить ожидания изоляции целевой ОС, а теневой режим позволяет скрытно выполнить зловредную "программу". Обе атаки используют минимальное количество транзисторов, но позволяют злоумышленнику получить широкий доступ к взломанной системе.
Мы разработали и реализовали потенциальные атаки. Используя две вредоносные схемы, мы разработали и реализовали три атаки. Используя механизм доступа к памяти, мы разработали атаку повышения привилегий, которая позволяет злоумышленнику получить права root без проверки учетных данных или создания записей в журнале. В теневом режиме мы реализуем черный ход, который позволяет злоумышленнику войти в систему под именем root без ввода пароля, а также реализуем сервис, который крадет пароли и отправляет их злоумышленнику. Эти атаки демонстрируют гибкость нашей схемы атаки. Кроме того, несмотря на низкий уровень наших вредоносных схем, эти атаки вызывают высокоуровневые эффекты для всей системы.
Чтобы оценить наши идеи, мы реализовали наши IMP как в моделировании, так и в физическом оборудовании. Мы модифицировали исходный код VHDL процессора Leon3 [8] (дизайн SPARC с открытым исходным кодом), включив в него вредоносную схему, и синтезировали его для платы разработки встраиваемой системы. Полученная система включает в себя такие распространенные компоненты, как Ethernet, USB, VGA и т. д., и способна работать в полноценном Linux-окружении. На этой системе мы провели нашу атаку с использованием бэкдора для входа в систему и измерили реальное возмущение системы.

Мы вносим свой вклад несколькими способами. Мы первыми разработали и реализовали аппаратное обеспечение общего назначения (два проекта) для поддержки разработки атак безопасности (три атаки). Мы показываем некоторые компромиссы, на которые могут пойти злоумышленники при проектировании вредоносных схем, и проблемы, с которыми могут столкнуться злоумышленники при реализации практических атак с помощью таких схем.

2 Постановка проблемы, предположения и модель угроз
В этом разделе мы определим проблему, которую мы решаем, сформулируем наши предположения и опишем нашу модель угроз.
Мы рассматриваем проблему разработки и реализации вредоносных процессоров, выполняющих атаки высокого уровня. В данной работе мы рассматриваем злоумышленника, который добавляет дополнительные схемы для осуществления атаки. Мы рассматриваем аналоговые возмущения схемы (как по времени, так и по мощности), а также дискретные возмущения. Мы не рассматриваем атаки, в которых конструкция на уровне затворов немодифицирована, и злоумышленник использует физические явления (например, чрезмерное нагревание) для возмущения выполнения или снижения производительности схемы.
Существует множество возможностей для атак на аппаратное обеспечение, включая этапы проектирования, изготовления, упаковки, тестирования и интеграции (например, на заводе по сборке ПК).

Мотивированные злоумышленники будут подрывать цепочку поставок ИС, если это принесет им выгоду. Поскольку модификация ИС - дорогостоящая атака, сомнительно, что "скриптовые дети" направят свою подростковую энергию на вредоносные процессоры, но то же самое нельзя сказать о злоумышленниках с ресурсами. Если вредоносные процессоры способны выполнять ценные атаки, правительства, организованные преступные синдикаты, террористические организации и т. д. будут использовать их, несмотря на их стоимость. Исторически сложилось так, что организации такого типа имеют опыт проведения тайных операций и проявляют немалую изобретательность в достижении своих целей. В отличие от них, работ, посвященных вредоносным процессорам, очень мало.

3 Конструкции аппаратных средств

В предыдущей работе [3] представлено простое, чисто аппаратное пространство для атак. В частности, они атакуют схему шифрования с открытым ключом. Отключая части схемы за определенное количество циклов, они обеспечивают атаку с подбором ключа. Используя 16-разрядный счетчик для синхронизации, смоделированная ими вредоносная схема занимает площадь в 406 ворот. Можно легко представить и другие чисто аппаратные атаки, например, заставить схему выйти из строя или выдать неверные результаты после достижения некоторого условия срабатывания. Кроме того, если не отслеживать выход схемы путем дублирования усилий, атаку будет трудно обнаружить. Однако возможности таких атак специального назначения ограничены. Атака с утечкой ключей возможна только потому, что аппаратное обеспечение, которое они атакуют, - это криптографическое оборудование. Единственное, для чего может быть использована такая вредоносная схема, - это кража ключей шифрования RSA; если же требуется украсть ключи AES или пароли с открытым текстом, необходимо разрабатывать отдельные схемы. Кроме того, хотя простые атаки просты (например, отказ после 2 лет работы), неясно, как реализовать семантически богатые атаки (например, выполнение SQL-запроса 'DROP TABLE *;') с помощью этой техники.

Вместо этого мы рассматриваем возможность разработки аппаратных механизмов для реализации вредоносной полезной нагрузки. В частности, мы рассматриваем два механизма: механизм доступа к памяти, который обеспечивает бесконтрольный доступ к памяти и позволяет злоумышленнику обойти защиту блока управления памятью (MMU), и механизм теневого режима, который позволяет злоумышленникам выполнять невидимую вредоносную программу. Эти два механизма представляют собой различные точки компромисса между аналоговыми возмущениями, временными возмущениями и видимостью изнутри системы, а также гибкостью атаки.
3.1 Доступ к памяти

Наш механизм доступа к памяти обеспечивает аппаратную поддержку непривилегированного вредоносного ПО, позволяя получить доступ к привилегированным областям памяти. Вредоносное ПО запускает атаку, подавая последовательность байтов на шину данных для включения схем доступа к памяти. Эта последовательность может быть произвольно длинной, чтобы избежать ложных срабатываний, а конкретная последовательность должна быть согласована перед развертыванием. Как только последовательность соблюдена, MMU в кэше данных игнорирует уровни привилегий процессора для доступа к памяти, тем самым предоставляя непривилегированному программному обеспечению доступ ко всей памяти, включая привилегированные области памяти, такие как внутренняя память операционной системы. Другими словами, загрузка магического значения на шину данных отключает проверку защиты. Мы реализуем эту технику, модифицируя кэш данных нашего процессора, чтобы включить в него небольшую машину состояний, которая ищет специальную последовательность байтов, а также дополнительную логику в MMU, чтобы игнорировать уровни привилегий, когда вредоносная программа осуществляет атаку.

Этот механизм требует относительно небольшого количества транзисторов и является ﬂexible; злоумышленник может использовать программное обеспечение для реализации любой полезной нагрузки, которую он пожелает. Хотя область такой атаки может быть больше, чем одна специально построенная схема, мы 
shadow.jpg

Рисунок 1. Аппаратные различия при активном теневом режиме.
можем использовать схему для гораздо большего. Например, подумайте, насколько большой должна быть специальная схема, чтобы принять внешнее управление, выполнить произвольные запросы к базе данных, отправить результаты за границу и модифицировать журналы, чтобы обвинить другого злоумышленника. По сравнению с этим механизм доступа к памяти просто крошечный. К сожалению, программное обеспечение атаки видно изнутри системы (по крайней мере, пока злоумышленник не загрузит более традиционные руткит-механизмы). Кроме того, злоумышленник должен сначала запустить свое вредоносное ПО в системе, пусть и с любым уровнем привилегий.


Используя механизм доступа к памяти, мы реализуем программу повышения привилегий, которая обходит обычные проверки безопасности (см. раздел 4.1).
3.2 Теневой режим
Наш механизм теневого режима находится между чисто аппаратным и чисто программным; мы пытаемся минимизировать количество дополнительных схем, необходимых для осуществления атаки, оставаться скрытыми и при этом поддерживать практически произвольные атаки. Чтобы минимизировать количество дополнительных схем, необходимых для атаки, мы используем существующие схемы, выполняя невидимые инструкции в новом режиме процессора, называемом теневым режимом. Теневой режим похож на режимы расширения ISA, такие как Alpha PAL code [5] и Intel system management mode (SMM) [2], поскольку инструкции теневого режима имеют полные привилегии процессора и невидимы для программного обеспечения. Однако, в отличие от PAL-кода и SMM, мы также стремимся быть невидимыми для аппаратного обеспечения за пределами нашего IMP. Чтобы скрыть инструкции и данные атаки от аппаратуры за пределами нашего IMP, мы резервируем строки кэша инструкций и кэша данных для нашей атаки, тем самым избегая использования внечиповых ресурсов и предотвращая раскрытие состояний и событий атаки, которые могут быть обнаружены. Однако резервирование кэша для атаки нарушает временные параметры программного обеспечения, работающего в системе. В разделе 6 мы оценим влияние резервирования кэш-линий для теневого режима.

Чтобы загрузить атаки в теневом режиме в наш IMP, мы включили два механизма загрузки. Первый заключается в том, чтобы включить небольшую секцию загрузочного кода, который инициализирует атаку. Мы инициализируем код bootstrap в кэш-памяти, используя существующие аппаратные средства сброса (вместо использования всех нулей) или, в качестве альтернативы, используя механизмы смещения сброса SRAM, описанные в недавнем патенте [15]. Этот код состоит из обычных инструкций процессора, которые выполняются после сброса процессора. Хотя этот код может установить атаку напрямую, более эффективно то, что IMP будет ждать заранее определенного триггера загрузки; набор условий, которые скажут IMP загрузить программное обеспечение из близлежащих данных. Точный механизм, используемый для загрузочных атак, зависит от целей злоумышленника и предположений, которые архитектор IMP делает о целевой платформе. Например, многие из наших атак предполагают, что целевая платформа имеет сетевой интерфейс. При наличии сетевого интерфейса злоумышленник может легко протащить данные в систему, отправив ей незапрашиваемый сетевой пакет, который ОС отбрасывает. Чтобы ОС отбросила сетевой пакет, она должна сначала его просмотреть, и акт проверки сетевого пакета дает нашему загрузочному механизму достаточно возможностей для поиска триггера (аналогичного триггеру механизма доступа к памяти) и тихой загрузки данных в отброшенный сетевой пакет в виде вредоносной программы, работающей в теневом режиме.


На рисунке 1 показана разница между работой в обычном режиме до загрузки теневой программы и работой в теневом режиме. В обычном режиме процессор проходит через иерархию кэша. При работе в теневом режиме процессор ограничивает активность на шине памяти. Часть адресного пространства поддерживается только кэшем L1. Поиск инструкций удовлетворяется из небольшой зарезервированной части icache, а загрузка/сохранение данных - из зарезервированной части dcache. Если вредоносной службе требуется доступ к обычной памяти, то она выполняет загрузку или сохранение за пределами зарезервированного адресного пространства. В противном случае, если он не выходит за пределы зарезервированного пространства, он не будет генерировать никакой активности на шине памяти и будет практически полностью невидим. Не изображено обычное выполнение при загрузке вредоносной программы; это то же самое, что и обычное выполнение, за исключением того, что часть icache и dcache недоступна (поскольку в них хранятся инструкции и данные для вредоносной программы).


Во время атаки код теневого режима должен иметь возможность получить контроль над процессором в ключевых точках потока инструкций. Для поддержки переходов в теневой режим мы используем отладочное оборудование, которое есть во многих процессорах и которое обычно включает в себя точки останова и точки наблюдения. Мы расширяем типичные точки наблюдения, чтобы позволить теневому коду отлавливать значения данных в дополнение к адресам, поскольку многие из наших сервисов используют этот триггер в качестве части атаки.

Используя теневой режим, мы реализуем две атаки: бэкдор-сервис (раздел 4.2) и сниффер паролей (раздел 4.3).

4 Примеры вредоносных сервисов

В этом разделе мы обсуждаем реализованные нами вредоносные сервисы и компромиссы, которые мы использовали в наших разработках. Мы рассмотрим вредоносный сервис, повышающий привилегии процесса, вредоносный сервис, позволяющий злоумышленнику автоматически войти в систему, и вредоносный сервис, крадущий пароли.
4.1 Повышение привилегий

Используя механизм доступа к памяти, мы реализуем вредоносную службу, повышающую привилегии пользовательского процесса до уровня привилегий root. Для осуществления атаки программа повышения привилегий использует наше троянское оборудование для отключения защиты привилегированных областей памяти. Затем она ищет в памяти ядра свою собственную структуру процесса и меняет свой эффективный идентификатор пользователя на root, чтобы запустить его с полными системными привилегиями.

Эта атака использует простые аппаратные механизмы, позволяющие вредоносному ПО получить контроль над системой без использования ошибки в программном обеспечении. Наш механизм доступа к памяти увеличивает количество логических ворот всего на 0,05 %, но при этом позволяет напрямую нарушать предположения ОС о защите памяти, что дает нам мощный вектор атаки на систему.
4.2 Бэкдор для входа в систему

Используя механизм теневого режима, мы реализуем вредоносный сервис, который действует как постоянный черный ход в систему (рис. 2). Чтобы инициировать атаку, злоумышленник отправляет незапрашиваемый сетевой пакет в целевую систему, а целевая ОС проверяет пакет на наличие контрольной суммы UDP. Акт проверки пакета (необходимый для принятия решения о том, следует ли его отбросить) запускает троянское оборудование, и вредоносная служба интерпретирует содержимое пакета как новое программное обеспечение, которое незаметно загружается в процессор. После этого целевая операционная система отбрасывает незапрашиваемый пакет и продолжает работу, не обращая внимания на атаку.

Теневой режим ﬁrmware следит за приложением для входа в систему. Обнаружив пользователя, пытающегося войти в систему с паролем "letmein", вредоносная служба изменяет возвращаемое значение функции проверки пароля на true, предоставляя доступ любому пользователю, использующему этот пароль. Для уменьшения следа атаки после успешной попытки входа в систему программа выгружается и отключает теневой режим, возвращая все ресурсы процессора системе. Отправляя затем UDP-пакет, а затем сразу же пытаясь войти в систему, злоумышленник требует, чтобы теневой режим был активен в течение минимального промежутка времени.

У этой сетевой техники внедрения атак есть два ключевых преимущества. Во-первых, эта техника является гибкой, поскольку сама атака может быть обновлена по сети. Такая гибкость позволяет злоумышленникам адаптировать атаку к изменяющемуся программному окружению или установить совершенно отдельную атаку. Во-вторых, эта техника позволяет избежать добавления в систему дополнительных состояний и событий, видимых за пределами процессора. Мы определяем последовательность байтов во время вычисления контрольной суммы UDP, поэтому данные атаки с высокой вероятностью уже присутствуют в кэше данных. Затем процесс загрузки устанавливает эти данные в зарезервированные строки кэша, поэтому для инициализации атаки не требуется обращения к памяти вне кристалла, даже после того, как ОС отбрасывает пакет. Для систем без доступа к сети можно использовать аналогичные внешние данные (например, первый блок USB-ключа, необходимый для идентификации типа системы).

Чистый эффект этой атаки заключается в том, что злоумышленник может отправить системе один пакет атаки, чтобы включить пароль "letmein", а затем войти в систему под любой учетной записью (включая root). После этого злоумышленник может использовать любые традиционные методы манипулирования системой, чтобы избежать обнаружения и совершить вредоносные действия. Механизм теневого режима увеличивает количество логических ворот всего на 0,08 % и дает нам неограниченный доступ к машине без использования программной уязвимости.
4.3 Кража паролей

Снова используя механизм теневого режима, мы реализуем сервис, который крадет пароли у пользователей системы. Поскольку процессор может игнорировать программную защиту памяти по своему усмотрению, основная трудность заключается в поиске паролей в болоте случайных данных. Наша служба ﬁrst вмешивается при вызове библиотеки записи, ища строку "Password:", чтобы определить процессы, которые могут получить пароли. При следующем вызове чтения он вмешивается, чтобы записать потенциальные пароли.

Чтобы найти функции чтения и записи и вмешаться в их вызовы, мы используем фиксированный интерфейс двоичного формата ELF ﬁle. Процесс, связанный с разделяемыми библиотеками, будет иметь секции своего исполняемого ﬁle, посвященные списку необходимых ему библиотечных функций. Удобно, что один из этих разделов включает таблицу строк, которая содержит человеческий смысл - имена - библиотечных функций. Всякий раз, когда IMP встречает новый процесс, он переключает управление на службу, которая анализирует исполняемый раздел нового процесса в поисках частей ELF ﬁle, необходимых динамическому компоновщику. С помощью этой информации он может определить сначала виртуальные, а затем физические адреса библиотечных функций, на которые следует наложить интерференцию. Устанавливая точки останова по физическим адресам, он может отлавливать вызовы общих библиотек независимо от виртуального адреса вызывающей стороны.

После кражи паролей мы используем две различные техники для утечки паролей из системы по сети. Первая техника использует системные вызовы для доступа к сетевому интерфейсу. Эта техника доступа к сети не зависит от аппаратного обеспечения и опирается только на (относительно статичный) интерфейс системных вызовов. Недостатком этой техники является то, что она требует взаимодействия с операционной системой, что приведет к появлению видимых состояний и событий атаки. Мы могли бы отменить изменения состояния с помощью журнала отмены [7], но восстановление контрольных точек на системном уровне приведет к нарушениям синхронизации. Вместо этого мы предпринимаем некоторые усилия по очистке (например, закрываем сокеты), но возмущения памяти на уровне ОС, вызванные нашей техникой, остаются.

Вторая техника, которую мы применяем, заключается в перезаписи существующих сетевых кадров нашими собственными пакетами. Эти пакеты представляют собой UDP-пакеты с заранее определенным IP-адресом назначения и данными, содержащими украденные пароли. Чтобы перезаписать пакеты нашими вредоносными UDP-пакетами, мы должны ﬁrst идентифицировать события, указывающие на то, что драйвер отправляет новый пакет передачи на устройство. Чтобы идентифицировать новые пакеты передачи, мы поместим входы/выходы с отображением в памяти между драйвером и регистрами управления устройства. Для нашей сетевой карты драйвер записывает в карту команду на выделение нового буфера передачи. Затем программа считывает возвращаемое значение этого выделения. В этот момент мы знаем, что все последующие записи в выделенный буфер будут предназначены для нового сетевого пакета. Чтобы перезаписать пакет драйвера, мы вмешиваемся в запись в регистр управления данными. Наша сетевая карта использует ввод-вывод с отображением памяти для передачи данных, поэтому мы можем напрямую изменять каждую инструкцию сохранения. Если бы сетевая карта поддерживала прямой доступ к памяти (DMA), мы могли бы приостановить запись в регистр управления, которая сигнализирует о начале передачи DMA. Пока эта запись приостановлена, мы могли бы модифицировать физическую память, используемую для DMA. Конечно, нам пришлось бы позаботиться о том, чтобы программы не смогли прочитать модифицированную память, а после завершения передачи нам пришлось бы восстанавливать исходные данные.

Поскольку при этой атаке теневой режим должен быть постоянно активен, она накладывает большие временные возмущения, чем предыдущие атаки. В разделе 6 мы оценим временные затраты на атаки с постоянным теневым режимом.


5 Реализация

В этом разделе описывается реализация наших IMP и трех вредоносных сервисов, которые мы использовали для оценки наших вредоносных процессоров.

Мы реализуем наши вредоносные процессоры на плате разработки FPGA, используя модифицированную версию процессора Leon3 [8]. Процессор Leon3 - это SPARC-процессор с открытым исходным кодом, реализующий набор инструкций SPARC v8 и включающий блок управления памятью (MMU). Мы модифицируем дизайн процессора на уровне VHDL, синтезируем и запускаем его на ПЛИС. Наша система работает под управлением Linux и имеет множество периферийных устройств, которые можно встретить в обычных компьютерных системах, таких как Ethernet, USB, VGA и PS/2.

Для поддержки атак мы реализовали механизм полного доступа к памяти и большую часть механизма теневого режима с помощью нашей системы на базе ПЛИС. Наша реализация теневого режима поддерживает загрузку и запуск невидимого вредоносного ПО. Кроме того, мы модифицировали аппаратное обеспечение сторожевой точки, чтобы отлавливать значения, а не адреса, а код маршрутизации исключений сторожевой точки использовал небольшую программную заглушку bootstrap (как описано в разделе 3.2).


Мы оцениваем нашу атаку на повышение привилегий (раздел 4.1) и наш сервис для автоматического входа в систему (раздел 4.2) на нашей системе на базе FPGA. Кроме того, мы используем полносистемный функциональный симулятор для более детального анализа атаки автоматического входа в систему и для оценки атаки кражи пароля (раздел 4.3).

6 Оценка

В этом разделе оценивается влияние КМП на систему. Используя наш аппаратный тестовый стенд, мы оцениваем влияние наших разработок на уровне схемы и измеряем влияние механизма теневого режима на производительность во время выполнения. Мы измеряем влияние теневого режима на производительность, поскольку это единственный механизм, который нарушает временные характеристики системы.
6.1 Возмущения на уровне схемы

В таблице 1 приведены данные о влиянии на уровне схемы реализации нашего механизма доступа к памяти и реализации механизма теневого режима с использованием нашего модифицированного процессора Leon3. Чтобы реализовать наш механизм доступа к памяти, мы модифицируем кэш данных и MMU. 
Процессор Логические вентили Строки VHDL-кода
базовый процессор 1,787,958 11,195
CPU + доступ к памяти 1,788,917 11,263
CPU + теневой режим 1,789,299 11,312


Таблица 1: В этой таблице приведены данные о влиянии наших ИМП на уровне схемы по сравнению с базовым (немодифицированным) процессором Leon3. Мы показываем влияние IMP, включающего наш механизм доступа к памяти, и IMP, включающего наш механизм теневого режима.
Таким образом, проверка разрешений на доступ к памяти игнорируется вредоносными программами. Для реализации механизма теневого режима мы модифицируем кэши инструкций и данных, чтобы после инициализации атаки зарезервировать по одному набору в каждом кэше для кода атаки и данных атаки. Кроме того, мы добавляем новый тип сторожевых точек, которые отлавливают значения загрузки/хранения вместо адресов, и вносим небольшие изменения в существующие сторожевые точки, чтобы сделать их пригодными для использования в теневом режиме. Мы синтезируем наши проекты с помощью цепочки инструментов Xilinx ISE 9.1i, которая используется для создания образов, работающих на нашей ПЛИС. Наш механизм доступа к памяти добавляет 959 логических вентилей к базовому процессору, а наши модификации теневого режима добавляют 1341 логический вентиль. Это увеличение логики на 0,05% и 0,08%, вероятно, уменьшится для более крупных процессоров, включающих до миллиарда логических вентилей. Также мы внесли небольшие изменения в VHDL-код процессора; мы добавили 68 строк кода для нашего механизма доступа к памяти и 117 строк кода для нашего механизма теневого режима.

Наши механизмы не влияют на время работы процессора. Используя цепочку инструментов Xilinx, мы проводим подробный анализ временных характеристик наших схем и проверяем, что наши проекты не находятся на критическом пути. Наши ИМС работают на частоте 40 МГц, что является рекомендуемой тактовой частотой для нашей аппаратной конфигурации.
6.2 Возмущения синхронизации

Для тестирования временных возмущений мы используем нашу систему на базе ПЛИС. Наш процессор работает на частоте 40 МГц, имеет двусторонний ассоциативный 4k кэш инструкций, двусторонний ассоциативный 8k кэш данных и 64 MB основной памяти, что сравнимо с встраиваемыми системами среднего уровня.

На рисунке 3 показаны временные эффекты различных условий атаки. Мы запустили различные бенчмарки: четыре процессорных бенчмарка SPEC - bzip2, gcc, parser и twolf, а также бенчмарк wget, связанный с вводом-выводом, в котором мы многократно загружали файлы с удаленной системы. Поскольку встроенная система была довольно маленькой (64 МБ оперативной памяти) и работала под управлением полнофункциональной операционной системы (Linux), здесь представлены все бенчмарки SPEC CINT2000, которые были в достаточном количестве.
eval


Рисунок 3: Возмущения времени измеряются относительно базовых тестов (без атаки).

Достаточно малые входные данные для успешного выполнения. У нас было четыре экспериментальных случая, соответственно: Базовый: Запуск бенчмарков на немодифицированном оборудовании без атак. Известный корень: Запуск бенчмарков на немодифицированном оборудовании, но атака на систему в середине. Мы используем правильный пароль root для входа в систему и крадем файл /etc/shadow ﬁle. Это наилучший сценарий, на который может рассчитывать злоумышленник: у него уже есть соответствующие учетные данные, и все, что ему нужно сделать, - это доставить полезную нагрузку. Это накладывает 1,32 % накладных расходов по сравнению с базовым вариантом (среднее арифметическое). Переходный период: Запустите бенчмарки на оборудовании с поддержкой теневого режима. В середине бенчмарка мы использовали аппаратный бэкдор (описанный в разделе 4.2) для входа в систему и кражи файла /etc/shadow ﬁle. Это дало в среднем 1,34 % накладных расходов по сравнению с базовым уровнем; это всего лишь 0,0235 % по сравнению с известным корневым случаем. Основная полезная нагрузка, безусловно, является самой дорогостоящей частью атаки. Атака в стиле "hitandrun" сводит к минимуму время, в течение которого активен теневой режим, поскольку атака очищается после успешного входа в систему. Таким образом, все аппаратные ресурсы доступны для выполнения не вредоносных задач, а накладные расходы сведены к минимуму. Постоянный: Запуск бенчмарков на оборудовании с поддержкой теневого режима, при этом аппаратный бэкдор для входа в систему постоянно активен. Теневой режим активен в течение всего времени выполнения; он никогда не отключается. В результате накладные расходы составляют в среднем 13,0 % по сравнению с базовым уровнем или 11,5 % по сравнению с атакой с известным корнем.


7 Защита от вредоносных процессоров

Неудивительно, что существующие методы защиты совершенно неэффективны против вредоносных процессоров. К счастью, защита в основном сводится к обнаружению, а вредоносные процессоры отличаются от своих доброжелательных собратьев несколькими особенностями. В этом разделе рассматривается обнаружение вредоносных процессоров по вносимым ими аналоговым и цифровым возмущениям. Поскольку разработчик вредоносного процессора может выбирать между ними, наилучшей защитой, скорее всего, будет комбинированный подход.
7.1 Аналоговые побочные эффекты

Возможность использования анализа мощности для выявления вредоносных схем была рассмотрена в недавней работе Агравала и др [3]. Однако анализ мощности зародился как техника атаки [12]. Поэтому существует большое количество работ, посвященных предотвращению анализа мощности, особенно с использованием схем с двумя рельсами и постоянным потреблением энергии [17, 18]. Для разработчика троянской схемы такие меры противодействия особенно удобны; накладные расходы площади относятся только к небольшой троянской схеме, а не ко всему процессору.

Аналоговые побочные эффекты также могут быть использованы для идентификации отдельных микросхем. Вариации технологического процесса приводят к тому, что каждый чип ведет себя несколько иначе, и Гассенд и др. используют этот факт для создания физически случайных функций (PUF), которые могут быть использованы для уникальной идентификации отдельных чипов [9]. Идентификация микросхем гарантирует, что микросхемы не будут подменены при транспортировке, но идентификации микросхем можно избежать, вставив вредоносные микросхемы выше по конвейеру поставки.
7.2 Цифровые возмущения

Существующие методы тестирования, обратного проектирования и устранения неисправностей не подходят для обнаружения цифровых побочных эффектов, возникающих в результате взлома ИС. При тестировании ИС [19] перечисляются различные состояния и переходы на входе и измеряется выходной сигнал, чтобы убедиться в правильности работы ИС. У умелого архитектора вредоносного процессора есть несколько способов избежать цифровых побочных эффектов. Ожидание в течение определенного периода времени - самый простой способ, хотя это может вызвать проблемы в зависимости от продолжительности тестов. Ожидание определенного входного сигнала почти наверняка пройдет тестирование, но теперь злоумышленник должен вызвать эту последовательность в развернутых системах. Учитывая большое пространство состояний микропроцессора1 , вполне возможно, что цифровое тестирование не сможет обнаружить вредоносные схемы, даже если злоумышленник не предпримет никаких мер предосторожности.

Реверсивный инжиниринг ИС позволяет воссоздать полные принципиальные схемы выпускаемых микросхем. Однако эти методы требуют много времени, дорогостоящи и разрушительны: на реинжиниринг одной микросхемы уходит до недели, а ее стоимость достигает 250 000 долларов [13]. Таким образом, эти методы могут быть использованы лишь на небольшом проценте образцов, что дает вредоносным ИС возможность избежать применения таких методов.

Методы обеспечения отказоустойчивости [14, 6] могут быть эффективны против вредоносных ИС. В задаче "Византийские генералы" [14] Лэмпорт и др. доказали, что для борьбы с m вредоносными ИС потребуется 3m+1 ИС. Хотя теоретически эта методика может быть применена, на практике такое количество избыточных микросхем может оказаться слишком дорогим из-за стоимости, энергопотребления и площади платы. Кроме того, только 59 литейных заводов в мире могут обрабатывать 300-миллиметровые пластины [16], поэтому необходимо тщательно выбирать места производства, чтобы добиться разнообразия, необходимого для борьбы с вредоносными ИС.


8 Выводы

В этой статье мы заложили основу для создания вредоносных процессоров, способных на ценные, высокоуровневые, сложные атаки. Мы утверждаем, что цепочка поставок ИС велика и уязвима, и что существуют организации, обладающие компетенцией, ресурсами и мотивацией для создания и внедрения вредоносных схем. Мы реализовали два механизма общего назначения для проектирования вредоносных процессоров и использовали их для реализации атак, позволяющих красть пароли, повышать привилегии и автоматически входить во взломанные системы.

Мы показали, что части этого пространства проектирования удивительно малы по количеству аппаратных средств и возможности обнаружения, но при этом позволяют проводить впечатляющие атаки. Атака на вход в систему использовала всего 1341 дополнительные ворота, но при этом давала злоумышленнику полный и высокоуровневый доступ к машине. Это же оборудование может поддерживать широкий спектр атак и является достаточно гибким для динамического обновления.

В целом мы пришли к выводу, что вредоносные процессоры более практичны, более ﬂexible, и их сложнее обнаружить, чем можно было бы предположить на основе первоначального анализа; вредоносное оборудование заслуживает внимания исследователей.

Благодарность

Мы хотели бы поблагодарить Франса Каашука и Майло Мартина за то, что они предложили нам обратить внимание на эскалацию привилегий. Мы хотели бы поблагодарить Джонатана Смита за то, что он указал нам на отчет Министерства обороны о поставках высокопроизводительных ИС, а также Викрама Адве, Лэндона Кокса, Майкла ЛеМэя и Эда Найтингейла за отзывы о раннем варианте этой статьи. Наконец, мы хотели бы поблагодарить анонимных рецензентов за их полезные отзывы.